make format:
*******************************************************************************

RULE       |     target : prerequisite.
           |          [TAB] recipe


*******************************************************************************

- by default make will execute the first rule it sees in a make file;

- both files and targets can be prerequisite;

- phony target:
  A phony target is one that is not really the name of file.
  such rule has to request explictly
  if by accident the target named a file, then the rule may not excute.
  .PHONY make sure the target stay phony,will always execute when request.

- empty target:
  A variant of phony target, hold recipe part which you request EXPLICITLY;
  empty target's file can either exists or not;
  empty target is used for record changes inside the recipe; for example, last
  change in recipe is 'touch emtpy_target' then this target will run every time
  

- special targets:

  .PHONY : prerequisite(s)
  such targets/requisite(s) will run UNCONDITIONALLY, regardless of whether file(s) of such 
  target(s) exists or not;

- rule without prerequisite or recipe, and target is non-exist file.
  make consider this virtual target always outdated, and run its virtual recipe
  this implies that all target depends on such target will always run it recipe

    clean: FORCE
          rm $(objects)
    FORCE:
  
    is equavilent to:

    clean:
          rm $(objects)
    .PHONY : clean
- multiple targets in a rule
  when targets only differ from the filenames, they depends on the same prerequisite
  and recipe.

  $@ stands for the file name of the target of the rule.

  @? stands for any prerequistes that are newer than the target.


- recursive make
  recipe would be like:
    cd sub_dir && $(MAKE)
      OR
    $(MAKE) -C sub_dir
  always use $(MAKE) variable, never use 'make', to make sure sub-make usee same $(MAKE)
  as top-level


- make variables
  . variable works by strict text substitution
  . variables and functions are expanded when read, almost in all part of mekfile
    except when variables/functions are defined using 'define' or on the right side
    of '=' when define.
  . why '=' and ':=' works differently when used insde 'ifdef var_name' statement.

- conditional statement in make

  . Extra spaces are allowed/ignored at the beginning og conditional directive
  . A tab is NOT allowed at the beginning of conditional directive
  . Any extra spaces in the directive are allowed, except directive name, variables.
  . Each recipe inside text-if-true/false should be written as it is not in the conditional
    statement.
- ifdef statement
  . FORMAT = `ifdef variable_name`
  . 'ifdef' takes the name of a variable, NOT the reference( $(var) such format)
  . it  evaluates the value of 'variable which name points to', if not empty, text-if-true
    otherwise, text-if-false
  . `ifdef variable_name` is its only format, if variable_name begins/ends with (|"|' or )|"|'
    it will be considered as part of the variable_name, 
  . the `variable_name` text is expanded if it is reference to a variable.

